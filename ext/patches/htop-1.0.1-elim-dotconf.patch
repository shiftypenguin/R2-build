diff -Naur htop-1.0.1.o/Settings.c htop-1.0.1/Settings.c
--- htop-1.0.1.o/Settings.c	2011-12-26 21:53:26.000000000 +0000
+++ htop-1.0.1/Settings.c	2013-07-24 07:45:16.901520162 +0000
@@ -215,47 +215,19 @@
    Settings* this = malloc(sizeof(Settings));
    this->pl = pl;
    this->header = header;
-   char* legacyDotfile = NULL;
    char* rcfile = getenv("HTOPRC");
    if (rcfile) {
       this->userSettings = strdup(rcfile);
    } else {
       const char* home = getenv("HOME");
       if (!home) home = "";
-      const char* xdgConfigHome = getenv("XDG_CONFIG_HOME");
-      char* configDir = NULL;
-      char* htopDir = NULL;
-      if (xdgConfigHome) {
-         this->userSettings = String_cat(xdgConfigHome, "/htop/htoprc");
-         configDir = strdup(xdgConfigHome);
-         htopDir = String_cat(xdgConfigHome, "/htop");
-      } else {
-         this->userSettings = String_cat(home, "/.config/htop/htoprc");
-         configDir = String_cat(home, "/.config");
-         htopDir = String_cat(home, "/.config/htop");
-      }
-      legacyDotfile = String_cat(home, "/.htoprc");
-      mkdir(configDir, 0700);
-      mkdir(htopDir, 0700);
-      free(htopDir);
-      free(configDir);
-      if (access(legacyDotfile, R_OK) != 0) {
-         free(legacyDotfile);
-         legacyDotfile = NULL;
-      }
+      this->userSettings = String_cat(home, "/.htoprc");
    }
    this->colorScheme = 0;
    this->changed = false;
    this->delay = DEFAULT_DELAY;
-   bool ok = Settings_read(this, legacyDotfile ? legacyDotfile : this->userSettings, cpuCount);
-   if (ok) {
-      if (legacyDotfile) {
-         // Transition to new location and delete old configuration file
-         if (Settings_write(this))
-            unlink(legacyDotfile);
-         free(legacyDotfile);
-      }
-   } else {
+   bool ok = Settings_read(this, this->userSettings, cpuCount);
+   if (!ok) {
       this->changed = true;
       // TODO: how to get SYSCONFDIR correctly through Autoconf?
       char* systemSettings = String_cat(SYSCONFDIR, "/htoprc");
