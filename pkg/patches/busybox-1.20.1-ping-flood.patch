--- busybox-1.20.1.o/networking/ping.c
+++ busybox-1.20.1/networking/ping.c
@@ -91,6 +91,8 @@
 //usage:       "Send ICMP ECHO_REQUEST packets to network hosts\n"
 //usage:     "\n	-4,-6		Force IP or IPv6 name resolution"
 //usage:     "\n	-c CNT		Send only CNT pings"
+//usage:     "\n	-i USECS	Interval between pings, in u-seconds"
+//usage:     "\n	-f		Flood ping (same as -i 1000)"
 //usage:     "\n	-s SIZE		Send SIZE data bytes in packets (default:56)"
 //usage:     "\n	-t TTL		Set TTL"
 //usage:     "\n	-I IFACE/IP	Use interface or IP address as source"
@@ -145,8 +147,8 @@
 	MAXIPLEN = 60,
 	MAXICMPLEN = 76,
 	MAX_DUP_CHK = (8 * 128),
-	MAXWAIT = 10,
-	PINGINTERVAL = 1, /* 1 second */
+	MAXWAIT = 10000000,
+	PINGINTERVAL = 1000000, /* 1 second, 1000000 microseconds */
 };
 
 #if !ENABLE_FEATURE_FANCY_PING
@@ -299,18 +301,20 @@
 
 /* Full(er) version */
 
-#define OPT_STRING ("qvc:s:t:w:W:I:4" IF_PING6("6"))
+#define OPT_STRING ("qvc:i:fs:t:w:W:I:4" IF_PING6("6"))
 enum {
 	OPT_QUIET = 1 << 0,
 	OPT_VERBOSE = 1 << 1,
 	OPT_c = 1 << 2,
-	OPT_s = 1 << 3,
-	OPT_t = 1 << 4,
-	OPT_w = 1 << 5,
-	OPT_W = 1 << 6,
-	OPT_I = 1 << 7,
-	OPT_IPV4 = 1 << 8,
-	OPT_IPV6 = (1 << 9) * ENABLE_PING6,
+	OPT_i = 1 << 3,
+	OPT_f = 1 << 4,
+	OPT_s = 1 << 5,
+	OPT_t = 1 << 6,
+	OPT_w = 1 << 7,
+	OPT_W = 1 << 8,
+	OPT_I = 1 << 9,
+	OPT_IPV4 = 1 << 10,
+	OPT_IPV6 = (1 << 11) * ENABLE_PING6,
 };
 
 
@@ -321,14 +325,15 @@
 	len_and_sockaddr *source_lsa;
 	unsigned datalen;
 	unsigned pingcount; /* must be int-sized */
+	useconds_t interval;
 	unsigned opt_ttl;
 	unsigned long ntransmitted, nreceived, nrepeats;
 	uint16_t myid;
 	unsigned tmin, tmax; /* in us */
 	unsigned long long tsum; /* in us, sum of all times */
-	unsigned deadline;
-	unsigned timeout;
-	unsigned total_secs;
+	useconds_t deadline;
+	useconds_t timeout;
+	useconds_t total_usecs;
 	unsigned sizeof_rcv_packet;
 	char *rcv_packet; /* [datalen + MAXIPLEN + MAXICMPLEN] */
 	void *snd_packet; /* [datalen + ipv4/ipv6_const] */
@@ -353,6 +358,7 @@
 #define nreceived    (G.nreceived   )
 #define nrepeats     (G.nrepeats    )
 #define pingcount    (G.pingcount   )
+#define interval     (G.interval    )
 #define opt_ttl      (G.opt_ttl     )
 #define myid         (G.myid        )
 #define tmin         (G.tmin        )
@@ -360,7 +366,7 @@
 #define tsum         (G.tsum        )
 #define deadline     (G.deadline    )
 #define timeout      (G.timeout     )
-#define total_secs   (G.total_secs  )
+#define total_usecs   (G.total_usecs  )
 #define hostname     (G.hostname    )
 #define dotted       (G.dotted      )
 #define pingaddr     (G.pingaddr    )
@@ -384,6 +390,22 @@
 
 /**************************************************************************/
 
+static int usecalarm(useconds_t ival)
+{
+	struct itimerval it;
+
+	memset(&it, 0, sizeof(struct itimerval));
+	if (ival >= 1000000) {
+		it.it_value.tv_sec = ival/1000000;
+		it.it_value.tv_usec = ival%1000000;
+	}
+	else {
+		it.it_value.tv_sec = 0;
+		it.it_value.tv_usec = ival;
+	}
+	return setitimer(ITIMER_REAL, &it, NULL);
+}
+
 static void print_stats_and_exit(int junk) NORETURN;
 static void print_stats_and_exit(int junk UNUSED_PARAM)
 {
@@ -411,6 +433,7 @@
 static void sendping_tail(void (*sp)(int), int size_pkt)
 {
 	int sz;
+	struct itimerval it;
 
 	CLR((uint16_t)ntransmitted % MAX_DUP_CHK);
 	ntransmitted++;
@@ -427,26 +450,26 @@
 		/* Didn't send all pings yet - schedule next in 1s */
 		signal(SIGALRM, sp);
 		if (deadline) {
-			total_secs += PINGINTERVAL;
-			if (total_secs >= deadline)
+			total_usecs += interval;
+			if (total_usecs >= deadline)
 				signal(SIGALRM, print_stats_and_exit);
 		}
-		alarm(PINGINTERVAL);
+
+		usecalarm(interval);
 	} else { /* -c NN, and all NN are sent (and no deadline) */
 		/* Wait for the last ping to come back.
 		 * -W timeout: wait for a response in seconds.
 		 * Affects only timeout in absense of any responses,
 		 * otherwise ping waits for two RTTs. */
-		unsigned expire = timeout;
+		useconds_t expire = timeout;
 
 		if (nreceived) {
-			/* approx. 2*tmax, in seconds (2 RTT) */
-			expire = tmax / (512*1024);
-			if (expire == 0)
-				expire = 1;
+			expire = tmax;
+			if (expire < 1000000)
+				expire = 1000000;
 		}
 		signal(SIGALRM, print_stats_and_exit);
-		alarm(expire);
+		usecalarm(expire);
 	}
 }
 
@@ -827,8 +850,10 @@
 	INIT_G();
 
 	/* exactly one argument needed; -v and -q don't mix; -c NUM, -t NUM, -w NUM, -W NUM */
-	opt_complementary = "=1:q--v:v--q:c+:t+:w+:W+";
-	opt |= getopt32(argv, OPT_STRING, &pingcount, &str_s, &opt_ttl, &deadline, &timeout, &str_I);
+	opt_complementary = "=1:q--v:v--q:c+:i+:t+:w+:W+";
+	opt |= getopt32(argv, OPT_STRING, &pingcount, &interval, &str_s, &opt_ttl, &deadline, &timeout, &str_I);
+	if (timeout) timeout *= 1000000;
+	if (!interval) interval = 1000000;
 	if (opt & OPT_s)
 		datalen = xatou16(str_s); // -s
 	if (opt & OPT_I) { // -I
@@ -838,6 +863,10 @@
 			source_lsa = xdotted2sockaddr(str_I, 0);
 			str_I = NULL; /* don't try to bind to device later */
 		}
+	}
+	if (opt & OPT_f) {
+		option_mask32 |= OPT_QUIET;
+		interval = 1000;
 	}
 	myid = (uint16_t) getpid();
 	hostname = argv[optind];
